/* Get all invoices where the UnitPrice on the InvoiceLine is greater than $0.99. */
/* SELECT * FROM invoice
JOIN invoiceline
ON invoiceline.invoiceId = invoice.invoiceId
WHERE invoiceline.unitprice > 0.99; */

/* Get the InvoiceDate, customer FirstName and LastName, and Total from all invoices. */
/* SELECT i.invoicedate, i.total, c.firstname, c.lastname 
FROM invoice i
JOIN customer c
ON i.customerid = c.customerid; */

/* Get the customer FirstName and LastName and the support rep's FirstName and LastName from all customers.
Support reps are on the Employee table. */
/* SELECT c.firstname, c.lastname, sr.firstname, sr.lastname
FROM customer c
JOIN employee sr
ON c.supportRepId = sr.employeeid; */

/* Get the album Title and the artist Name from all albums. */
/* SELECT al.title, ar.name
FROM album al
JOIN artist ar
ON al.artistid = ar.artistid; */

/* Get all PlaylistTrack TrackIds where the playlist Name is Music. */
/* SELECT plt.trackid
FROM playlisttrack plt
JOIN playlist pl
ON pl.playlistid = plt.playlistid
WHERE pl.name = "Music"; */

/* Get all Track Names for PlaylistId 5. */
/* SELECT t.name
FROM track t
JOIN playlisttrack pt
ON pt.trackid = t.trackid
where pt.playlistid = 5; */

/* Get all Track Names and the playlist Name that they're on ( 2 joins ). */
/* SELECT t.name, p.name
FROM track t
JOIN PlaylistTrack pt
ON t.trackid = pt.trackid
JOIN playlist p
ON pt.playlistid = p.playlistid;
 */
 
/* Get all Track Names and Album Titles that are the genre "Alternative" ( 2 joins ). */
/* SELECT t.name, a.title
FROM track t
JOIN album a
ON t.albumid = a.albumid
JOIN genre g
ON t.genreid = g.genreid
WHERE g.name = "Alternative"; */





/* Get all invoices where the UnitPrice on the InvoiceLine is greater than $0.99. */
/* SELECT * FROM invoice WHERE invoiceid IN
(SELECT invoiceid FROM invoiceline WHERE unitprice > 0.99) */

/* Get all Playlist Tracks where the playlist name is Music. */
/* SELECT * FROM playlisttrack WHERE playlistid IN
(SELECT playlistid from playlist WHERE name = "Music"); */

/* Get all Track names for PlaylistId 5. */
/* SELECT name FROM track WHERE trackid IN
(SELECT trackid FROM playlisttrack WHERE playlistid = 5); */

/* Get all tracks where the Genre is Comedy. */
/* SELECT * FROM track WHERE genreid IN
(SELECT genreid FROM genre WHERE name = "Comedy"); */

/* Get all tracks where the Album is Fireball. */
/* SELECT * FROM track WHERE albumid IN
(SELECT albumid FROM album WHERE title = "Fireball"); */

/* Get all tracks for the artist Queen ( 2 nested subqueries ). */
/* SELECT * FROM track WHERE albumid IN
(SELECT albumid FROM album WHERE artistid IN
(SELECT artistid FROM artist WHERE name = "Queen")) */





/* Find all customers with fax numbers and set those numbers to null. */
/* UPDATE customer 
SET fax = NULL
WHERE fax IS NOT NULL; */

/* Find all customers with no company (null) and set their company to "Self". */
/* UPDATE customer
SET company = "Self"
WHERE company IS NULL; */

/* Find the customer Julia Barnett and change her last name to Thompson. */
/* UPDATE customer
SET lastname = "Thompson"
WHERE firstname = "Julia" AND lastname = "Barnett"; */

/* Find the customer with this email luisrojas@yahoo.cl and change his support rep to 4. */
/* UPDATE customer
SET supportrepid = 4
WHERE email = "luisrojas@yahoo.cl"; */

/* Find all tracks that are the genre Metal and have no composer. Set the composer to "The darkness around us". */
/* UPDATE track
SET composer = "The darkness around us"
WHERE composer IS NULL and genreid IN 
(SELECT genreid FROM genre WHERE name = "Metal"); */




/* Refresh your page to remove all database changes. */





/* Find a count of how many tracks there are per genre. Display the genre name with the count. */
/* SELECT COUNT(t.trackid), g.name FROM track t
JOIN genre g
ON g.genreid = t.genreid
GROUP BY g.name; */

/* Find a count of how many tracks are the "Pop" genre and how many tracks are the "Rock" genre. */
/* SELECT COUNT(t.trackid), g.name FROM track t
JOIN genre g
ON g.genreid = t.genreid
WHERE g.name = "Pop" OR g.name = "Rock"
GROUP BY g.name; */

/* Find a list of all artists and how many albums they have. */
/* SELECT ar.name, COUNT(al.title) FROM artist ar
JOIN album al
ON ar.artistid = al.artistid
GROUP BY ar.name; */





/* From the Track table find a unique list of all Composers. */
/* SELECT DISTINCT composer FROM track; */

/* From the Invoice table find a unique list of all BillingPostalCodes. */
/* SELECT DISTINCT billingpostalcode FROM invoice; */

/* From the Customer table find a unique list of all Companys. */
/* SELECT DISTINCT company FROM customer; */




/* Copy, paste, and run the SQL code from the summary. */
/* CREATE TABLE practice_delete ( Name string, Type string, Value integer );
INSERT INTO practice_delete ( Name, Type, Value ) VALUES ("delete", "bronze", 50);
INSERT INTO practice_delete ( Name, Type, Value ) VALUES ("delete", "bronze", 50);
INSERT INTO practice_delete ( Name, Type, Value ) VALUES ("delete", "bronze", 50);
INSERT INTO practice_delete ( Name, Type, Value ) VALUES ("delete", "silver", 100);
INSERT INTO practice_delete ( Name, Type, Value ) VALUES ("delete", "silver", 100);
INSERT INTO practice_delete ( Name, Type, Value ) VALUES ("delete", "gold", 150);
INSERT INTO practice_delete ( Name, Type, Value ) VALUES ("delete", "gold", 150);
INSERT INTO practice_delete ( Name, Type, Value ) VALUES ("delete", "gold", 150);
INSERT INTO practice_delete ( Name, Type, Value ) VALUES ("delete", "gold", 150);

SELECT * FROM practice_delete; */

/* Delete all "bronze" entries from the table. */
/* DELETE FROM practice_delete
WHERE type = "bronze"; */

/* Delete all "silver" entries from the table. */
/* DELETE FROM practice_delete
WHERE type = "silver"; */

/* Delete all entries whose value is equal to 150. */
/* DELETE FROM practice_delete
WHERE value = 150; */




/* Create 3 tables following the criteria in the summary. */
/* CREATE TABLE users(
	id integer primary key autoincrement,
  	name varchar(50),
  	email varchar(100)
);

CREATE TABLE products(
	id integer primary key autoincrement,
  	name varchar(50),
  	price float
);

CREATE TABLE orders(
	id integer,
  	product_id integer,
    	FOREIGN KEY (product_id) REFERENCES products(id)
); */

/* Add some data to fill up each table.
At least 3 users, 3 products, 3 orders. */
/* INSERT INTO users(name, email)
VALUES
	("Jakey", "email@jakey.com"),
	("Jake", "email@jake.com"),
    ("Jaw", "email@jaw.com");

INSERT INTO products(name, price)
VALUES
	("Shoes", 75),
    ("Hat", 30),
    ("Shirt", 20);

INSERT INTO orders(id, product_id)
VALUES
	(1,1),
    (1,2),
    (2,1); */


/* Run queries against your data.
Get all products for the first order.
Get all orders.
Get the total cost of an order ( sum the price of all products on an order ). */
/* SELECT * FROM products WHERE id IN
(SELECT product_id FROM orders WHERE id IN (
	SELECT id FROM orders LIMIT 1)); */

/* SELECT * FROM orders; */

/* SELECT SUM(price) FROM products WHERE id IN
(SELECT product_id FROM orders WHERE id IN (
	SELECT id FROM orders LIMIT 1)); */

/* Add a foreign key reference from Orders to Users. */
/* ALTER TABLE orders
ADD COLUMN user_id INTEGER REFERENCES users(id); */
    
/* Update the Orders table to link a user to each order. */
/* UPDATE orders
SET user_id = 1; */

/* Run queries against your data.
Get all orders for a user.
Get how many orders each user has. */
/* SELECT * FROM orders WHERE user_id = 1; */

/* SELECT COUNT(o.id), u.id FROM orders o
JOIN users u
ON u.id = o.user_id
GROUP BY u.id;
 */